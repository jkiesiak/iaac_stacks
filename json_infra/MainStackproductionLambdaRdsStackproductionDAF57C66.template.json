{
 "Resources": {
  "S3EventDataBucketproductionF9AC8078": {
   "Type": "AWS::S3::Bucket",
   "Properties": {
    "BucketName": "s3-event-data-production",
    "Tags": [
     {
      "Key": "aws-cdk:auto-delete-objects",
      "Value": "true"
     },
     {
      "Key": "DeploymentTime",
      "Value": "2025-06-25T15:34:29.895932"
     },
     {
      "Key": "Environment",
      "Value": "production"
     },
     {
      "Key": "Owner",
      "Value": "Joanna Kiesiak"
     },
     {
      "Key": "Project",
      "Value": "my-stack"
     }
    ]
   },
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete",
   "Metadata": {
    "aws:cdk:path": "MainStack-production/LambdaRdsStack-production/S3EventDataBucket-production/Resource"
   }
  },
  "S3EventDataBucketproductionPolicy61EB77CB": {
   "Type": "AWS::S3::BucketPolicy",
   "Properties": {
    "Bucket": {
     "Ref": "S3EventDataBucketproductionF9AC8078"
    },
    "PolicyDocument": {
     "Statement": [
      {
       "Action": [
        "s3:PutBucketPolicy",
        "s3:GetBucket*",
        "s3:List*",
        "s3:DeleteObject*"
       ],
       "Effect": "Allow",
       "Principal": {
        "AWS": {
         "Fn::GetAtt": [
          "CustomS3AutoDeleteObjectsCustomResourceProviderRole3B1BD092",
          "Arn"
         ]
        }
       },
       "Resource": [
        {
         "Fn::GetAtt": [
          "S3EventDataBucketproductionF9AC8078",
          "Arn"
         ]
        },
        {
         "Fn::Join": [
          "",
          [
           {
            "Fn::GetAtt": [
             "S3EventDataBucketproductionF9AC8078",
             "Arn"
            ]
           },
           "/*"
          ]
         ]
        }
       ]
      }
     ],
     "Version": "2012-10-17"
    }
   },
   "Metadata": {
    "aws:cdk:path": "MainStack-production/LambdaRdsStack-production/S3EventDataBucket-production/Policy/Resource"
   }
  },
  "S3EventDataBucketproductionAutoDeleteObjectsCustomResource10619E06": {
   "Type": "Custom::S3AutoDeleteObjects",
   "Properties": {
    "ServiceToken": {
     "Fn::GetAtt": [
      "CustomS3AutoDeleteObjectsCustomResourceProviderHandler9D90184F",
      "Arn"
     ]
    },
    "BucketName": {
     "Ref": "S3EventDataBucketproductionF9AC8078"
    }
   },
   "DependsOn": [
    "S3EventDataBucketproductionPolicy61EB77CB"
   ],
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete",
   "Metadata": {
    "aws:cdk:path": "MainStack-production/LambdaRdsStack-production/S3EventDataBucket-production/AutoDeleteObjectsCustomResource/Default"
   }
  },
  "S3EventDataBucketproductionNotificationsD0E95E8E": {
   "Type": "Custom::S3BucketNotifications",
   "Properties": {
    "ServiceToken": {
     "Fn::GetAtt": [
      "BucketNotificationsHandler050a0587b7544547bf325f094a3db8347ECC3691",
      "Arn"
     ]
    },
    "BucketName": {
     "Ref": "S3EventDataBucketproductionF9AC8078"
    },
    "NotificationConfiguration": {
     "EventBridgeConfiguration": {}
    },
    "Managed": true,
    "SkipDestinationValidation": false
   },
   "DependsOn": [
    "S3EventDataBucketproductionPolicy61EB77CB"
   ],
   "Metadata": {
    "aws:cdk:path": "MainStack-production/LambdaRdsStack-production/S3EventDataBucket-production/Notifications/Resource"
   }
  },
  "CustomS3AutoDeleteObjectsCustomResourceProviderRole3B1BD092": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Version": "2012-10-17",
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "lambda.amazonaws.com"
       }
      }
     ]
    },
    "ManagedPolicyArns": [
     {
      "Fn::Sub": "arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "MainStack-production/LambdaRdsStack-production/Custom::S3AutoDeleteObjectsCustomResourceProvider/Role"
   }
  },
  "CustomS3AutoDeleteObjectsCustomResourceProviderHandler9D90184F": {
   "Type": "AWS::Lambda::Function",
   "Properties": {
    "Code": {
     "S3Bucket": {
      "Fn::Sub": "cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}"
     },
     "S3Key": "faa95a81ae7d7373f3e1f242268f904eb748d8d0fdd306e8a6fe515a1905a7d6.zip"
    },
    "Timeout": 900,
    "MemorySize": 128,
    "Handler": "index.handler",
    "Role": {
     "Fn::GetAtt": [
      "CustomS3AutoDeleteObjectsCustomResourceProviderRole3B1BD092",
      "Arn"
     ]
    },
    "Runtime": {
     "Fn::FindInMap": [
      "LatestNodeRuntimeMap",
      {
       "Ref": "AWS::Region"
      },
      "value"
     ]
    },
    "Description": {
     "Fn::Join": [
      "",
      [
       "Lambda function for auto-deleting objects in ",
       {
        "Ref": "S3EventDataBucketproductionF9AC8078"
       },
       " S3 bucket."
      ]
     ]
    }
   },
   "DependsOn": [
    "CustomS3AutoDeleteObjectsCustomResourceProviderRole3B1BD092"
   ],
   "Metadata": {
    "aws:cdk:path": "MainStack-production/LambdaRdsStack-production/Custom::S3AutoDeleteObjectsCustomResourceProvider/Handler",
    "aws:asset:path": "asset.faa95a81ae7d7373f3e1f242268f904eb748d8d0fdd306e8a6fe515a1905a7d6",
    "aws:asset:property": "Code"
   }
  },
  "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleB6FB88EC": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "lambda.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "ManagedPolicyArns": [
     {
      "Fn::Join": [
       "",
       [
        "arn:",
        {
         "Ref": "AWS::Partition"
        },
        ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
       ]
      ]
     }
    ],
    "Tags": [
     {
      "Key": "DeploymentTime",
      "Value": "2025-06-25T15:34:29.895932"
     },
     {
      "Key": "Environment",
      "Value": "production"
     },
     {
      "Key": "Owner",
      "Value": "Joanna Kiesiak"
     },
     {
      "Key": "Project",
      "Value": "my-stack"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "MainStack-production/LambdaRdsStack-production/BucketNotificationsHandler050a0587b7544547bf325f094a3db834/Role/Resource"
   }
  },
  "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleDefaultPolicy2CF63D36": {
   "Type": "AWS::IAM::Policy",
   "Properties": {
    "PolicyDocument": {
     "Statement": [
      {
       "Action": "s3:PutBucketNotification",
       "Effect": "Allow",
       "Resource": "*"
      }
     ],
     "Version": "2012-10-17"
    },
    "PolicyName": "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleDefaultPolicy2CF63D36",
    "Roles": [
     {
      "Ref": "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleB6FB88EC"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "MainStack-production/LambdaRdsStack-production/BucketNotificationsHandler050a0587b7544547bf325f094a3db834/Role/DefaultPolicy/Resource"
   }
  },
  "BucketNotificationsHandler050a0587b7544547bf325f094a3db8347ECC3691": {
   "Type": "AWS::Lambda::Function",
   "Properties": {
    "Description": "AWS CloudFormation handler for \"Custom::S3BucketNotifications\" resources (@aws-cdk/aws-s3)",
    "Code": {
     "ZipFile": "import boto3  # type: ignore\nimport json\nimport logging\nimport urllib.request\n\ns3 = boto3.client(\"s3\")\n\nEVENTBRIDGE_CONFIGURATION = 'EventBridgeConfiguration'\nCONFIGURATION_TYPES = [\"TopicConfigurations\", \"QueueConfigurations\", \"LambdaFunctionConfigurations\"]\n\ndef handler(event: dict, context):\n  response_status = \"SUCCESS\"\n  error_message = \"\"\n  try:\n    props = event[\"ResourceProperties\"]\n    notification_configuration = props[\"NotificationConfiguration\"]\n    managed = props.get('Managed', 'true').lower() == 'true'\n    skipDestinationValidation = props.get('SkipDestinationValidation', 'false').lower() == 'true'\n    stack_id = event['StackId']\n    old = event.get(\"OldResourceProperties\", {}).get(\"NotificationConfiguration\", {})\n    if managed:\n      config = handle_managed(event[\"RequestType\"], notification_configuration)\n    else:\n      config = handle_unmanaged(props[\"BucketName\"], stack_id, event[\"RequestType\"], notification_configuration, old)\n    s3.put_bucket_notification_configuration(Bucket=props[\"BucketName\"], NotificationConfiguration=config, SkipDestinationValidation=skipDestinationValidation)\n  except Exception as e:\n    logging.exception(\"Failed to put bucket notification configuration\")\n    response_status = \"FAILED\"\n    error_message = f\"Error: {str(e)}. \"\n  finally:\n    submit_response(event, context, response_status, error_message)\n\ndef handle_managed(request_type, notification_configuration):\n  if request_type == 'Delete':\n    return {}\n  return notification_configuration\n\ndef handle_unmanaged(bucket, stack_id, request_type, notification_configuration, old):\n  def get_id(n):\n    n['Id'] = ''\n    sorted_notifications = sort_filter_rules(n)\n    strToHash=json.dumps(sorted_notifications, sort_keys=True).replace('\"Name\": \"prefix\"', '\"Name\": \"Prefix\"').replace('\"Name\": \"suffix\"', '\"Name\": \"Suffix\"')\n    return f\"{stack_id}-{hash(strToHash)}\"\n  def with_id(n):\n    n['Id'] = get_id(n)\n    return n\n\n  external_notifications = {}\n  existing_notifications = s3.get_bucket_notification_configuration(Bucket=bucket)\n  for t in CONFIGURATION_TYPES:\n    if request_type == 'Update':\n        old_incoming_ids = [get_id(n) for n in old.get(t, [])]\n        external_notifications[t] = [n for n in existing_notifications.get(t, []) if not get_id(n) in old_incoming_ids]      \n    elif request_type == 'Delete':\n        external_notifications[t] = [n for n in existing_notifications.get(t, []) if not n['Id'].startswith(f\"{stack_id}-\")]\n    elif request_type == 'Create':\n        external_notifications[t] = [n for n in existing_notifications.get(t, [])]\n  if EVENTBRIDGE_CONFIGURATION in existing_notifications:\n    external_notifications[EVENTBRIDGE_CONFIGURATION] = existing_notifications[EVENTBRIDGE_CONFIGURATION]\n\n  if request_type == 'Delete':\n    return external_notifications\n\n  notifications = {}\n  for t in CONFIGURATION_TYPES:\n    external = external_notifications.get(t, [])\n    incoming = [with_id(n) for n in notification_configuration.get(t, [])]\n    notifications[t] = external + incoming\n\n  if EVENTBRIDGE_CONFIGURATION in notification_configuration:\n    notifications[EVENTBRIDGE_CONFIGURATION] = notification_configuration[EVENTBRIDGE_CONFIGURATION]\n  elif EVENTBRIDGE_CONFIGURATION in external_notifications:\n    notifications[EVENTBRIDGE_CONFIGURATION] = external_notifications[EVENTBRIDGE_CONFIGURATION]\n\n  return notifications\n\ndef submit_response(event: dict, context, response_status: str, error_message: str):\n  response_body = json.dumps(\n    {\n      \"Status\": response_status,\n      \"Reason\": f\"{error_message}See the details in CloudWatch Log Stream: {context.log_stream_name}\",\n      \"PhysicalResourceId\": event.get(\"PhysicalResourceId\") or event[\"LogicalResourceId\"],\n      \"StackId\": event[\"StackId\"],\n      \"RequestId\": event[\"RequestId\"],\n      \"LogicalResourceId\": event[\"LogicalResourceId\"],\n      \"NoEcho\": False,\n    }\n  ).encode(\"utf-8\")\n  headers = {\"content-type\": \"\", \"content-length\": str(len(response_body))}\n  try:\n    req = urllib.request.Request(url=event[\"ResponseURL\"], headers=headers, data=response_body, method=\"PUT\")\n    with urllib.request.urlopen(req) as response:\n      print(response.read().decode(\"utf-8\"))\n    print(\"Status code: \" + response.reason)\n  except Exception as e:\n      print(\"send(..) failed executing request.urlopen(..): \" + str(e))\n\ndef sort_filter_rules(json_obj):\n  if not isinstance(json_obj, dict):\n      return json_obj\n  for key, value in json_obj.items():\n      if isinstance(value, dict):\n          json_obj[key] = sort_filter_rules(value)\n      elif isinstance(value, list):\n          json_obj[key] = [sort_filter_rules(item) for item in value]\n  if \"Filter\" in json_obj and \"Key\" in json_obj[\"Filter\"] and \"FilterRules\" in json_obj[\"Filter\"][\"Key\"]:\n      filter_rules = json_obj[\"Filter\"][\"Key\"][\"FilterRules\"]\n      sorted_filter_rules = sorted(filter_rules, key=lambda x: x[\"Name\"])\n      json_obj[\"Filter\"][\"Key\"][\"FilterRules\"] = sorted_filter_rules\n  return json_obj"
    },
    "Handler": "index.handler",
    "Role": {
     "Fn::GetAtt": [
      "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleB6FB88EC",
      "Arn"
     ]
    },
    "Runtime": "python3.11",
    "Timeout": 300,
    "Tags": [
     {
      "Key": "DeploymentTime",
      "Value": "2025-06-25T15:34:29.895932"
     },
     {
      "Key": "Environment",
      "Value": "production"
     },
     {
      "Key": "Owner",
      "Value": "Joanna Kiesiak"
     },
     {
      "Key": "Project",
      "Value": "my-stack"
     }
    ]
   },
   "DependsOn": [
    "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleDefaultPolicy2CF63D36",
    "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleB6FB88EC"
   ],
   "Metadata": {
    "aws:cdk:path": "MainStack-production/LambdaRdsStack-production/BucketNotificationsHandler050a0587b7544547bf325f094a3db834/Resource"
   }
  },
  "S3BackupDataBucketproduction5B83CAD4": {
   "Type": "AWS::S3::Bucket",
   "Properties": {
    "BucketName": "s3-backup-data-production",
    "Tags": [
     {
      "Key": "aws-cdk:auto-delete-objects",
      "Value": "true"
     },
     {
      "Key": "DeploymentTime",
      "Value": "2025-06-25T15:34:29.895932"
     },
     {
      "Key": "Environment",
      "Value": "production"
     },
     {
      "Key": "Owner",
      "Value": "Joanna Kiesiak"
     },
     {
      "Key": "Project",
      "Value": "my-stack"
     }
    ]
   },
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete",
   "Metadata": {
    "aws:cdk:path": "MainStack-production/LambdaRdsStack-production/S3BackupDataBucket-production/Resource"
   }
  },
  "S3BackupDataBucketproductionPolicyF592156F": {
   "Type": "AWS::S3::BucketPolicy",
   "Properties": {
    "Bucket": {
     "Ref": "S3BackupDataBucketproduction5B83CAD4"
    },
    "PolicyDocument": {
     "Statement": [
      {
       "Action": [
        "s3:PutBucketPolicy",
        "s3:GetBucket*",
        "s3:List*",
        "s3:DeleteObject*"
       ],
       "Effect": "Allow",
       "Principal": {
        "AWS": {
         "Fn::GetAtt": [
          "CustomS3AutoDeleteObjectsCustomResourceProviderRole3B1BD092",
          "Arn"
         ]
        }
       },
       "Resource": [
        {
         "Fn::GetAtt": [
          "S3BackupDataBucketproduction5B83CAD4",
          "Arn"
         ]
        },
        {
         "Fn::Join": [
          "",
          [
           {
            "Fn::GetAtt": [
             "S3BackupDataBucketproduction5B83CAD4",
             "Arn"
            ]
           },
           "/*"
          ]
         ]
        }
       ]
      }
     ],
     "Version": "2012-10-17"
    }
   },
   "Metadata": {
    "aws:cdk:path": "MainStack-production/LambdaRdsStack-production/S3BackupDataBucket-production/Policy/Resource"
   }
  },
  "S3BackupDataBucketproductionAutoDeleteObjectsCustomResourceE4765505": {
   "Type": "Custom::S3AutoDeleteObjects",
   "Properties": {
    "ServiceToken": {
     "Fn::GetAtt": [
      "CustomS3AutoDeleteObjectsCustomResourceProviderHandler9D90184F",
      "Arn"
     ]
    },
    "BucketName": {
     "Ref": "S3BackupDataBucketproduction5B83CAD4"
    }
   },
   "DependsOn": [
    "S3BackupDataBucketproductionPolicyF592156F"
   ],
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete",
   "Metadata": {
    "aws:cdk:path": "MainStack-production/LambdaRdsStack-production/S3BackupDataBucket-production/AutoDeleteObjectsCustomResource/Default"
   }
  },
  "LambdaInsertDataIntoRDSproductionEBBD7D24": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "lambda.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "ManagedPolicyArns": [
     {
      "Ref": "LambdaEssentialPolicyproductionD3B35AAB"
     }
    ],
    "RoleName": "lambda-insert-data-production",
    "Tags": [
     {
      "Key": "DeploymentTime",
      "Value": "2025-06-25T15:34:29.895932"
     },
     {
      "Key": "Environment",
      "Value": "production"
     },
     {
      "Key": "Owner",
      "Value": "Joanna Kiesiak"
     },
     {
      "Key": "Project",
      "Value": "my-stack"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "MainStack-production/LambdaRdsStack-production/LambdaInsertDataIntoRDS-production/Resource"
   }
  },
  "LambdaEssentialPolicyproductionD3B35AAB": {
   "Type": "AWS::IAM::ManagedPolicy",
   "Properties": {
    "Description": "",
    "ManagedPolicyName": "lambda_insert_data_into_rds_policy-production",
    "Path": "/",
    "PolicyDocument": {
     "Statement": [
      {
       "Action": [
        "logs:CreateLogGroup",
        "logs:CreateLogStream",
        "logs:PutLogEvents"
       ],
       "Effect": "Allow",
       "Resource": {
        "Fn::Join": [
         "",
         [
          "arn:aws:logs:",
          {
           "Ref": "AWS::Region"
          },
          ":",
          {
           "Ref": "AWS::AccountId"
          },
          ":*"
         ]
        ]
       }
      },
      {
       "Action": [
        "s3:GetObject",
        "s3:ListBucket"
       ],
       "Effect": "Allow",
       "Resource": [
        {
         "Fn::GetAtt": [
          "S3EventDataBucketproductionF9AC8078",
          "Arn"
         ]
        },
        {
         "Fn::Join": [
          "",
          [
           {
            "Fn::GetAtt": [
             "S3EventDataBucketproductionF9AC8078",
             "Arn"
            ]
           },
           "/*"
          ]
         ]
        }
       ]
      },
      {
       "Action": [
        "rds-data:ExecuteStatement",
        "rds-data:BatchExecuteStatement",
        "rds-db:connect"
       ],
       "Effect": "Allow",
       "Resource": {
        "Fn::Join": [
         "",
         [
          "arn:",
          {
           "Ref": "AWS::Partition"
          },
          ":rds:",
          {
           "Ref": "AWS::Region"
          },
          ":",
          {
           "Ref": "AWS::AccountId"
          },
          ":db:",
          {
           "Fn::ImportValue": "MainStackproductionRDSStackproduction3C5AE54B:ExportsOutputRefPostgresRdsInstanceproduction9C9C29B0A991D2E4"
          }
         ]
        ]
       }
      },
      {
       "Action": [
        "secretsmanager:GetSecretValue",
        "secretsmanager:DescribeSecret"
       ],
       "Effect": "Allow",
       "Resource": {
        "Fn::ImportValue": "MainStackproductionRDSStackproduction3C5AE54B:ExportsOutputRefRdsPasswordSecretproduction42A6E1A84C9B0334"
       }
      }
     ],
     "Version": "2012-10-17"
    }
   },
   "Metadata": {
    "aws:cdk:path": "MainStack-production/LambdaRdsStack-production/LambdaEssentialPolicy-production/Resource"
   }
  },
  "Pg8000Layerproduction03E1DD11": {
   "Type": "AWS::Lambda::LayerVersion",
   "Properties": {
    "CompatibleRuntimes": [
     "python3.8",
     "python3.9"
    ],
    "Content": {
     "S3Bucket": {
      "Fn::Sub": "cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}"
     },
     "S3Key": "435172d93610e5125475f5662a6e6c4da3548f90fbbd30cc9cdbef9c00ef1216.zip"
    },
    "LayerName": "python_pg8000_layer"
   },
   "Metadata": {
    "aws:cdk:path": "MainStack-production/LambdaRdsStack-production/Pg8000Layer-production/Resource",
    "aws:asset:path": "asset.435172d93610e5125475f5662a6e6c4da3548f90fbbd30cc9cdbef9c00ef1216.zip",
    "aws:asset:is-bundled": false,
    "aws:asset:property": "Content"
   }
  },
  "LoggingLayerproduction395811CC": {
   "Type": "AWS::Lambda::LayerVersion",
   "Properties": {
    "CompatibleRuntimes": [
     "python3.8",
     "python3.9"
    ],
    "Content": {
     "S3Bucket": {
      "Fn::Sub": "cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}"
     },
     "S3Key": "fa044bd72b7a666d3969e5eb04fc6f24ddfaca42212cd5586b94b399de96d0fa.zip"
    },
    "LayerName": "python_logging_layer"
   },
   "Metadata": {
    "aws:cdk:path": "MainStack-production/LambdaRdsStack-production/LoggingLayer-production/Resource",
    "aws:asset:path": "asset.fa044bd72b7a666d3969e5eb04fc6f24ddfaca42212cd5586b94b399de96d0fa.zip",
    "aws:asset:is-bundled": false,
    "aws:asset:property": "Content"
   }
  },
  "InsertDataIntoRdsproductionEA156E3E": {
   "Type": "AWS::Lambda::Function",
   "Properties": {
    "Code": {
     "S3Bucket": {
      "Fn::Sub": "cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}"
     },
     "S3Key": "46e7fbabc0f062b9d578e0fdc450f738321a57274a508a303f152c9767c12ed5.zip"
    },
    "Environment": {
     "Variables": {
      "S3_BACKUP_DATA": {
       "Ref": "S3BackupDataBucketproduction5B83CAD4"
      },
      "S3_EVENT_DATA": {
       "Ref": "S3EventDataBucketproductionF9AC8078"
      },
      "RDS_HOST": {
       "Fn::ImportValue": "MainStackproductionRDSStackproduction3C5AE54B:ExportsOutputFnGetAttPostgresRdsInstanceproduction9C9C29B0EndpointAddressD8244D70"
      },
      "SSM_NAME": {
       "Fn::Join": [
        "-",
        [
         {
          "Fn::Select": [
           0,
           {
            "Fn::Split": [
             "-",
             {
              "Fn::Select": [
               6,
               {
                "Fn::Split": [
                 ":",
                 {
                  "Fn::ImportValue": "MainStackproductionRDSStackproduction3C5AE54B:ExportsOutputRefRdsPasswordSecretproduction42A6E1A84C9B0334"
                 }
                ]
               }
              ]
             }
            ]
           }
          ]
         },
         {
          "Fn::Select": [
           1,
           {
            "Fn::Split": [
             "-",
             {
              "Fn::Select": [
               6,
               {
                "Fn::Split": [
                 ":",
                 {
                  "Fn::ImportValue": "MainStackproductionRDSStackproduction3C5AE54B:ExportsOutputRefRdsPasswordSecretproduction42A6E1A84C9B0334"
                 }
                ]
               }
              ]
             }
            ]
           }
          ]
         },
         {
          "Fn::Select": [
           2,
           {
            "Fn::Split": [
             "-",
             {
              "Fn::Select": [
               6,
               {
                "Fn::Split": [
                 ":",
                 {
                  "Fn::ImportValue": "MainStackproductionRDSStackproduction3C5AE54B:ExportsOutputRefRdsPasswordSecretproduction42A6E1A84C9B0334"
                 }
                ]
               }
              ]
             }
            ]
           }
          ]
         }
        ]
       ]
      },
      "RDS_DB": "database_rds"
     }
    },
    "FunctionName": "lambda_insert_data_into_rds-production",
    "Handler": "lambda_handler.lambda_handler",
    "Layers": [
     {
      "Ref": "Pg8000Layerproduction03E1DD11"
     },
     {
      "Ref": "LoggingLayerproduction395811CC"
     }
    ],
    "Role": {
     "Fn::GetAtt": [
      "LambdaInsertDataIntoRDSproductionEBBD7D24",
      "Arn"
     ]
    },
    "Runtime": "python3.8",
    "Tags": [
     {
      "Key": "DeploymentTime",
      "Value": "2025-06-25T15:34:29.895932"
     },
     {
      "Key": "Environment",
      "Value": "production"
     },
     {
      "Key": "Owner",
      "Value": "Joanna Kiesiak"
     },
     {
      "Key": "Project",
      "Value": "my-stack"
     }
    ],
    "Timeout": 300
   },
   "DependsOn": [
    "LambdaInsertDataIntoRDSproductionEBBD7D24"
   ],
   "Metadata": {
    "aws:cdk:path": "MainStack-production/LambdaRdsStack-production/InsertDataIntoRds-production/Resource",
    "aws:asset:path": "asset.46e7fbabc0f062b9d578e0fdc450f738321a57274a508a303f152c9767c12ed5",
    "aws:asset:is-bundled": false,
    "aws:asset:property": "Code"
   }
  },
  "LambdaStoreBackupRoleproduction5DAABCC2": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "lambda.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "ManagedPolicyArns": [
     {
      "Ref": "LambdaStoreBackupPolicyproductionCE5D48E9"
     }
    ],
    "RoleName": "lambda-store-backup-production",
    "Tags": [
     {
      "Key": "DeploymentTime",
      "Value": "2025-06-25T15:34:29.895932"
     },
     {
      "Key": "Environment",
      "Value": "production"
     },
     {
      "Key": "Owner",
      "Value": "Joanna Kiesiak"
     },
     {
      "Key": "Project",
      "Value": "my-stack"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "MainStack-production/LambdaRdsStack-production/LambdaStoreBackupRole-production/Resource"
   }
  },
  "LambdaStoreBackupPolicyproductionCE5D48E9": {
   "Type": "AWS::IAM::ManagedPolicy",
   "Properties": {
    "Description": "",
    "ManagedPolicyName": "lambda_store_backup-policy-production",
    "Path": "/",
    "PolicyDocument": {
     "Statement": [
      {
       "Action": [
        "logs:CreateLogGroup",
        "logs:CreateLogStream",
        "logs:PutLogEvents"
       ],
       "Effect": "Allow",
       "Resource": {
        "Fn::Join": [
         "",
         [
          "arn:aws:logs:",
          {
           "Ref": "AWS::Region"
          },
          ":",
          {
           "Ref": "AWS::AccountId"
          },
          ":*"
         ]
        ]
       }
      },
      {
       "Action": [
        "s3:GetObject",
        "s3:ListBucket",
        "s3:DeleteObject"
       ],
       "Effect": "Allow",
       "Resource": [
        {
         "Fn::GetAtt": [
          "S3EventDataBucketproductionF9AC8078",
          "Arn"
         ]
        },
        {
         "Fn::Join": [
          "",
          [
           {
            "Fn::GetAtt": [
             "S3EventDataBucketproductionF9AC8078",
             "Arn"
            ]
           },
           "/*"
          ]
         ]
        }
       ]
      },
      {
       "Action": [
        "s3:PutObject",
        "s3:PutObjectAcl"
       ],
       "Effect": "Allow",
       "Resource": {
        "Fn::Join": [
         "",
         [
          {
           "Fn::GetAtt": [
            "S3BackupDataBucketproduction5B83CAD4",
            "Arn"
           ]
          },
          "/*"
         ]
        ]
       }
      }
     ],
     "Version": "2012-10-17"
    }
   },
   "Metadata": {
    "aws:cdk:path": "MainStack-production/LambdaRdsStack-production/LambdaStoreBackupPolicy-production/Resource"
   }
  },
  "LambdaStoreBackupproductionD17DFFF2": {
   "Type": "AWS::Lambda::Function",
   "Properties": {
    "Code": {
     "S3Bucket": {
      "Fn::Sub": "cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}"
     },
     "S3Key": "dd0d406d77d99830e5da6bd377174dba05a676c716a30ec1f6db9792a51d50d4.zip"
    },
    "Environment": {
     "Variables": {
      "S3_BACKUP_DATA": {
       "Ref": "S3BackupDataBucketproduction5B83CAD4"
      },
      "S3_EVENT_DATA": {
       "Ref": "S3EventDataBucketproductionF9AC8078"
      }
     }
    },
    "FunctionName": "lambda_store_backup-production",
    "Handler": "lambda_handler.lambda_handler",
    "Layers": [
     {
      "Ref": "LoggingLayerproduction395811CC"
     }
    ],
    "Role": {
     "Fn::GetAtt": [
      "LambdaStoreBackupRoleproduction5DAABCC2",
      "Arn"
     ]
    },
    "Runtime": "python3.9",
    "Tags": [
     {
      "Key": "DeploymentTime",
      "Value": "2025-06-25T15:34:29.895932"
     },
     {
      "Key": "Environment",
      "Value": "production"
     },
     {
      "Key": "Owner",
      "Value": "Joanna Kiesiak"
     },
     {
      "Key": "Project",
      "Value": "my-stack"
     }
    ],
    "Timeout": 300
   },
   "DependsOn": [
    "LambdaStoreBackupRoleproduction5DAABCC2"
   ],
   "Metadata": {
    "aws:cdk:path": "MainStack-production/LambdaRdsStack-production/LambdaStoreBackup-production/Resource",
    "aws:asset:path": "asset.dd0d406d77d99830e5da6bd377174dba05a676c716a30ec1f6db9792a51d50d4",
    "aws:asset:is-bundled": false,
    "aws:asset:property": "Code"
   }
  },
  "StepFunctionExecutionRoleproduction59826D5C": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "states.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "RoleName": "step-funct-execution-role-production",
    "Tags": [
     {
      "Key": "DeploymentTime",
      "Value": "2025-06-25T15:34:29.895932"
     },
     {
      "Key": "Environment",
      "Value": "production"
     },
     {
      "Key": "Owner",
      "Value": "Joanna Kiesiak"
     },
     {
      "Key": "Project",
      "Value": "my-stack"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "MainStack-production/LambdaRdsStack-production/StepFunctionExecutionRole-production/Resource"
   }
  },
  "StepFunctionExecutionRoleproductionDefaultPolicy7902FBEA": {
   "Type": "AWS::IAM::Policy",
   "Properties": {
    "PolicyDocument": {
     "Statement": [
      {
       "Action": "lambda:InvokeFunction",
       "Effect": "Allow",
       "Resource": "*"
      },
      {
       "Action": "lambda:InvokeFunction",
       "Effect": "Allow",
       "Resource": [
        {
         "Fn::GetAtt": [
          "InsertDataIntoRdsproductionEA156E3E",
          "Arn"
         ]
        },
        {
         "Fn::Join": [
          "",
          [
           {
            "Fn::GetAtt": [
             "InsertDataIntoRdsproductionEA156E3E",
             "Arn"
            ]
           },
           ":*"
          ]
         ]
        }
       ]
      },
      {
       "Action": "lambda:InvokeFunction",
       "Effect": "Allow",
       "Resource": [
        {
         "Fn::GetAtt": [
          "LambdaStoreBackupproductionD17DFFF2",
          "Arn"
         ]
        },
        {
         "Fn::Join": [
          "",
          [
           {
            "Fn::GetAtt": [
             "LambdaStoreBackupproductionD17DFFF2",
             "Arn"
            ]
           },
           ":*"
          ]
         ]
        }
       ]
      }
     ],
     "Version": "2012-10-17"
    },
    "PolicyName": "StepFunctionExecutionRoleproductionDefaultPolicy7902FBEA",
    "Roles": [
     {
      "Ref": "StepFunctionExecutionRoleproduction59826D5C"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "MainStack-production/LambdaRdsStack-production/StepFunctionExecutionRole-production/DefaultPolicy/Resource"
   }
  },
  "StepFunctionsproduction3A920269": {
   "Type": "AWS::StepFunctions::StateMachine",
   "Properties": {
    "DefinitionString": {
     "Fn::Join": [
      "",
      [
       "{\"StartAt\":\"InsertIntoRDS-production\",\"States\":{\"InsertIntoRDS-production\":{\"Next\":\"StoreBackup-production\",\"Retry\":[{\"ErrorEquals\":[\"Lambda.ClientExecutionTimeoutException\",\"Lambda.ServiceException\",\"Lambda.AWSLambdaException\",\"Lambda.SdkClientException\"],\"IntervalSeconds\":2,\"MaxAttempts\":6,\"BackoffRate\":2},{\"ErrorEquals\":[\"States.ALL\"],\"IntervalSeconds\":2,\"MaxAttempts\":3,\"BackoffRate\":2}],\"Type\":\"Task\",\"OutputPath\":\"$.Payload\",\"Resource\":\"arn:",
       {
        "Ref": "AWS::Partition"
       },
       ":states:::lambda:invoke\",\"Parameters\":{\"FunctionName\":\"",
       {
        "Fn::GetAtt": [
         "InsertDataIntoRdsproductionEA156E3E",
         "Arn"
        ]
       },
       "\",\"Payload.$\":\"$\"}},\"StoreBackup-production\":{\"End\":true,\"Retry\":[{\"ErrorEquals\":[\"Lambda.ClientExecutionTimeoutException\",\"Lambda.ServiceException\",\"Lambda.AWSLambdaException\",\"Lambda.SdkClientException\"],\"IntervalSeconds\":2,\"MaxAttempts\":6,\"BackoffRate\":2},{\"ErrorEquals\":[\"States.ALL\"],\"IntervalSeconds\":2,\"MaxAttempts\":3,\"BackoffRate\":2}],\"Catch\":[{\"ErrorEquals\":[\"States.ALL\"],\"ResultPath\":\"$.error\",\"Next\":\"StoreBackupFail\"}],\"Type\":\"Task\",\"OutputPath\":\"$.Payload\",\"Resource\":\"arn:",
       {
        "Ref": "AWS::Partition"
       },
       ":states:::lambda:invoke\",\"Parameters\":{\"FunctionName\":\"",
       {
        "Fn::GetAtt": [
         "LambdaStoreBackupproductionD17DFFF2",
         "Arn"
        ]
       },
       "\",\"Payload.$\":\"$\"}},\"StoreBackupFail\":{\"Type\":\"Fail\",\"Error\":\"BackupFailed\",\"Cause\":\"Failed to backup file.\"}}}"
      ]
     ]
    },
    "RoleArn": {
     "Fn::GetAtt": [
      "StepFunctionExecutionRoleproduction59826D5C",
      "Arn"
     ]
    },
    "StateMachineName": "step-functions-processing-flow-production",
    "Tags": [
     {
      "Key": "DeploymentTime",
      "Value": "2025-06-25T15:34:29.895932"
     },
     {
      "Key": "Environment",
      "Value": "production"
     },
     {
      "Key": "Owner",
      "Value": "Joanna Kiesiak"
     },
     {
      "Key": "Project",
      "Value": "my-stack"
     }
    ]
   },
   "DependsOn": [
    "StepFunctionExecutionRoleproductionDefaultPolicy7902FBEA",
    "StepFunctionExecutionRoleproduction59826D5C"
   ],
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete",
   "Metadata": {
    "aws:cdk:path": "MainStack-production/LambdaRdsStack-production/StepFunctions-production/Resource"
   }
  },
  "S3PutObjectRuleproduction20D6171A": {
   "Type": "AWS::Events::Rule",
   "Properties": {
    "EventPattern": {
     "detail": {
      "bucket": {
       "name": [
        {
         "Ref": "S3EventDataBucketproductionF9AC8078"
        }
       ]
      }
     },
     "detail-type": [
      "Object Created"
     ],
     "source": [
      "aws.s3"
     ]
    },
    "State": "ENABLED",
    "Targets": [
     {
      "Arn": {
       "Ref": "StepFunctionsproduction3A920269"
      },
      "Id": "Target0",
      "RoleArn": {
       "Fn::GetAtt": [
        "EventBridgeInvokeRoleproduction4BA1C84F",
        "Arn"
       ]
      }
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "MainStack-production/LambdaRdsStack-production/S3PutObjectRule-production/Resource"
   }
  },
  "EventBridgeInvokeRoleproduction4BA1C84F": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "events.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "RoleName": "invoke-stepfunctions-role-production",
    "Tags": [
     {
      "Key": "DeploymentTime",
      "Value": "2025-06-25T15:34:29.895932"
     },
     {
      "Key": "Environment",
      "Value": "production"
     },
     {
      "Key": "Owner",
      "Value": "Joanna Kiesiak"
     },
     {
      "Key": "Project",
      "Value": "my-stack"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "MainStack-production/LambdaRdsStack-production/EventBridgeInvokeRole-production/Resource"
   }
  },
  "EventBridgeInvokeRoleproductionDefaultPolicyF7D44B1A": {
   "Type": "AWS::IAM::Policy",
   "Properties": {
    "PolicyDocument": {
     "Statement": [
      {
       "Action": "states:StartExecution",
       "Effect": "Allow",
       "Resource": {
        "Ref": "StepFunctionsproduction3A920269"
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "PolicyName": "EventBridgeInvokeRoleproductionDefaultPolicyF7D44B1A",
    "Roles": [
     {
      "Ref": "EventBridgeInvokeRoleproduction4BA1C84F"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "MainStack-production/LambdaRdsStack-production/EventBridgeInvokeRole-production/DefaultPolicy/Resource"
   }
  },
  "CDKMetadata": {
   "Type": "AWS::CDK::Metadata",
   "Properties": {
    "Analytics": "v2:deflate64:H4sIAAAAAAAA/12QT4vCMBDFP4v3dFa3h909roKwYEEq7FXGdKyxbSKdiSIh333pH6nu6b0375eQyTssvj5gPsMbJ7qoktocIOwEdaXwxvvAKYSl1xWJWh3t6AbZutro+zQe8xCWyBSVwQZC7mrqqF6nQ6PL0GJJxTR/GURVY3MoEMIG79T+UsvG2Q57yWtvtYzFw0fF6R6ZSRi+O1EsdDmOLe8FuWLY9Nf/2Kur6BWAsEZTq52gUIb6ZGy/xXOOiq5khSHkftzR1xSjWnkW1+TEzrd6KJ58hpeLseU/atu6qymo7X5O9Q/eCZYd9yCi2t7l5OxbCos5fM7ObEzSeiumIcgH/QNPfVm10AEAAA=="
   },
   "Metadata": {
    "aws:cdk:path": "MainStack-production/LambdaRdsStack-production/CDKMetadata/Default"
   },
   "Condition": "CDKMetadataAvailable"
  }
 },
 "Mappings": {
  "LatestNodeRuntimeMap": {
   "af-south-1": {
    "value": "nodejs22.x"
   },
   "ap-east-1": {
    "value": "nodejs22.x"
   },
   "ap-east-2": {
    "value": "nodejs22.x"
   },
   "ap-northeast-1": {
    "value": "nodejs22.x"
   },
   "ap-northeast-2": {
    "value": "nodejs22.x"
   },
   "ap-northeast-3": {
    "value": "nodejs22.x"
   },
   "ap-south-1": {
    "value": "nodejs22.x"
   },
   "ap-south-2": {
    "value": "nodejs22.x"
   },
   "ap-southeast-1": {
    "value": "nodejs22.x"
   },
   "ap-southeast-2": {
    "value": "nodejs22.x"
   },
   "ap-southeast-3": {
    "value": "nodejs22.x"
   },
   "ap-southeast-4": {
    "value": "nodejs22.x"
   },
   "ap-southeast-5": {
    "value": "nodejs22.x"
   },
   "ap-southeast-7": {
    "value": "nodejs22.x"
   },
   "ca-central-1": {
    "value": "nodejs22.x"
   },
   "ca-west-1": {
    "value": "nodejs22.x"
   },
   "cn-north-1": {
    "value": "nodejs22.x"
   },
   "cn-northwest-1": {
    "value": "nodejs22.x"
   },
   "eu-central-1": {
    "value": "nodejs22.x"
   },
   "eu-central-2": {
    "value": "nodejs22.x"
   },
   "eu-isoe-west-1": {
    "value": "nodejs18.x"
   },
   "eu-north-1": {
    "value": "nodejs22.x"
   },
   "eu-south-1": {
    "value": "nodejs22.x"
   },
   "eu-south-2": {
    "value": "nodejs22.x"
   },
   "eu-west-1": {
    "value": "nodejs22.x"
   },
   "eu-west-2": {
    "value": "nodejs22.x"
   },
   "eu-west-3": {
    "value": "nodejs22.x"
   },
   "il-central-1": {
    "value": "nodejs22.x"
   },
   "me-central-1": {
    "value": "nodejs22.x"
   },
   "me-south-1": {
    "value": "nodejs22.x"
   },
   "mx-central-1": {
    "value": "nodejs22.x"
   },
   "sa-east-1": {
    "value": "nodejs22.x"
   },
   "us-east-1": {
    "value": "nodejs22.x"
   },
   "us-east-2": {
    "value": "nodejs22.x"
   },
   "us-gov-east-1": {
    "value": "nodejs22.x"
   },
   "us-gov-west-1": {
    "value": "nodejs22.x"
   },
   "us-iso-east-1": {
    "value": "nodejs18.x"
   },
   "us-iso-west-1": {
    "value": "nodejs18.x"
   },
   "us-isob-east-1": {
    "value": "nodejs18.x"
   },
   "us-isob-west-1": {
    "value": "nodejs18.x"
   },
   "us-west-1": {
    "value": "nodejs22.x"
   },
   "us-west-2": {
    "value": "nodejs22.x"
   }
  }
 },
 "Conditions": {
  "CDKMetadataAvailable": {
   "Fn::Or": [
    {
     "Fn::Or": [
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "af-south-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "ap-east-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "ap-northeast-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "ap-northeast-2"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "ap-northeast-3"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "ap-south-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "ap-south-2"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "ap-southeast-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "ap-southeast-2"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "ap-southeast-3"
       ]
      }
     ]
    },
    {
     "Fn::Or": [
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "ap-southeast-4"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "ca-central-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "ca-west-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "cn-north-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "cn-northwest-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "eu-central-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "eu-central-2"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "eu-north-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "eu-south-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "eu-south-2"
       ]
      }
     ]
    },
    {
     "Fn::Or": [
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "eu-west-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "eu-west-2"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "eu-west-3"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "il-central-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "me-central-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "me-south-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "sa-east-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "us-east-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "us-east-2"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "us-west-1"
       ]
      }
     ]
    },
    {
     "Fn::Equals": [
      {
       "Ref": "AWS::Region"
      },
      "us-west-2"
     ]
    }
   ]
  }
 },
 "Parameters": {
  "BootstrapVersion": {
   "Type": "AWS::SSM::Parameter::Value<String>",
   "Default": "/cdk-bootstrap/hnb659fds/version",
   "Description": "Version of the CDK Bootstrap resources in this environment, automatically retrieved from SSM Parameter Store. [cdk:skip]"
  }
 },
 "Rules": {
  "CheckBootstrapVersion": {
   "Assertions": [
    {
     "Assert": {
      "Fn::Not": [
       {
        "Fn::Contains": [
         [
          "1",
          "2",
          "3",
          "4",
          "5"
         ],
         {
          "Ref": "BootstrapVersion"
         }
        ]
       }
      ]
     },
     "AssertDescription": "CDK bootstrap stack version 6 required. Please run 'cdk bootstrap' with a recent version of the CDK CLI."
    }
   ]
  }
 }
}